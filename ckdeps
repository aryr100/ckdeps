#!/bin/bash
#
# CKDeps - Versão 6.2 - Analisa as Dependências dos Aplicativos Binários Instalado no Slackware
#
# Criação do Projeto: 04/04/2021
# Última Atualização: 20/05/2023
#
# By Mauricio Ferrari. Santa Catarina, Brasil.
#
###############################################################################################


# Definição de Variáveis

r='\e[31m'
g='\e[32m'
y='\e[33m'
b='\e[34m'
c='\e[36m'
t='\e[m'

clib='FALSE'
spkg='FALSE'
apkg='FALSE'
cpkg='FALSE'


#  Exibição de Informação

function info_view
{

printf "\n${b}CKDeps v$(grep -Eo "[0-9].[0-9]" <(head -3 $0))
Pesquisa por Pacotes Instalados e Procura por Dependências Faltantes em Binários.\n
${g}Sintaxe: $y${0##*/} $r<Parâmetros> \e[33margumentos\n
${g}Parâmetros:
\t$r-b <binário> $b:$y Pesquisa por Dependências em Executáveis Binários.
\t$r-s <pacotes> $b:$y Pesquisa Básica de Pacotes Instalados no Sistema.
\t$r-S <pacotes> $b:$y Pesquisa Avançada de Pacotes Instalados no Sistema.
\t$r-c <arquivo> $b:$y Pesquisa por um Arquivo no Conteúdo dos Pacotes Instalados.\n
${g}Parâmetros Extras:
\t${r}i $b:$y Ignora Diferenças Entre Maiúsculas/Minúsculas.
\t    Pode ser usado com os Parâmetros$r s$y,${r}S$y e$r c$y.\n
${g}Exemplos de Uso:
\t$y${0##*/} $r-b$c /usr/bin/megasync
\t$y${0##*/} $r-s$c gcc libtorrent
\t$y${0##*/} $r-Si$c qmplay2 wxgtk3
\t$y${0##*/} $r-c$c libass libXv\n\n$t"

exit 0
}


# Entrada de Parâmetros

[ -t 0 ] && {
    [ ! "$1" ] && info_view || true
} || {
    set - $* $(cat -) # Suporte a Redirecionamento
}

arg=${*#$1}
[ -z "$arg" ] && info_view

while getopts bsSci option 2>&-; do
    case $option in
        'b') [ "$s" != "TRUE" ] && { clib=TRUE; s=TRUE; } || info_view ;;
        's') [ "$s" != "TRUE" ] && { spkg=TRUE; s=TRUE; } || info_view ;;
        'S') [ "$s" != "TRUE" ] && { apkg=TRUE; s=TRUE; } || info_view ;;
        'c') [ "$s" != "TRUE" ] && { cpkg=TRUE; s=TRUE; } || info_view ;;
        'i') parm='-i' ;;
        '?') info_view ;;
    esac
done


#  Verificar Dependências Faltantes

[ "$clib" == "TRUE" ] && {
    [ ! $(($#-1)) -eq 1 ] && {
        printf "\n${r}Muitos Parâmetros!$t\n\n" >&2
        exit 1
    }

    [ ! -e $arg ] && {
        printf "\n${r}Arquivo Inexistente!$t\n\n" >&2
        exit 1
    }

    ckbin=$(ldd $arg 2>&-)

    [ -z "$ckbin" ] && {
        printf "\n${r}Não é um Executável Binário Válido!$t\n\n" >&2
        exit 1
    }

    cklib=$(awk -F= '{print $1}' <(grep '=> not found' <<< $ckbin))
    printf "\n${y}Dependências Faltantes: $b($(wc -w <<< $cklib))$r\n$cklib$t\n\n"
    exit 0
}


#  Operações para Pesquisas

cd /var/log/packages
lst=$(printf "%s\n" *)


#  Pesquisa de Pacotes

[ "$spkg" == "TRUE" ] && {
    for pkg in $arg
    {
        found=$(echo -e "$found\n$(grep "$parm $pkg" <<< $lst)")
    }
    found=$(sort -u <<< $found)
    printf "\n${y}Pacotes Encontrados: $b($(wc -w <<< $found))$c$(sed "s/^/	/" <<< $found)$t\n\n"
    exit 0
}


#  Pesquisa Avançada de Pacotes

[ "$apkg" == "TRUE" ] && {
    for pkg in $arg
    {
        verify=$(grep "$parm" "^$pkg-[0-9]" <<< $lst)
        [ ! "$verify" ] && notfound=$(echo -e "$notfound\n\t$pkg") || found=$(echo -e "$found\n\t$verify")
    }
    printf "\n${y}Pacotes Encontrados: $b($(wc -w <<< $found))$g$(sort <<< $found)$t\n"
    printf "\n${y}Pacotes Não Encontrados: $b($(wc -w <<< $notfound))$r$(sort <<< $notfound)$t\n\n"
    exit 0
}


#  Pesquisa no Conteúdo do Pacote

[ "$cpkg" == "TRUE" ] && {
    for pkg in $(sort <(fmt -1 <<< $arg))
    {
        cntpkg=$(grep "$parm" "$pkg" <(grep -vE ':|/doc/|install/|/$' $lst))
        cntpkg=$(sed "s|:\([[:alnum:]]*[[:punct:]]*\)*||g" <<< $cntpkg)
        nmpkg=$(sed "s/^/\t/g" <(sort -u <<< $cntpkg))
        found=$(echo -e "$found\n\n$y$pkg: $b($(wc -w <<< $nmpkg)) \n$c$nmpkg$t")
    }
    printf "$(sed "1d" <<< $found)\n\n"
    exit 0
}; info_view
